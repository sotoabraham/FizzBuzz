//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FizzBuzz.Service.Divisibility {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="FizzBuzz.CalcService", ConfigurationName="Service.Divisibility.Divisiblity")]
    public interface Divisiblity {
        
        [System.ServiceModel.OperationContractAttribute(Action="FizzBuzz.CalcService/Divisiblity/ServiceTest", ReplyAction="FizzBuzz.CalcService/Divisiblity/ServiceTestResponse")]
        string ServiceTest();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="FizzBuzz.CalcService/Divisiblity/ServiceTest", ReplyAction="FizzBuzz.CalcService/Divisiblity/ServiceTestResponse")]
        System.IAsyncResult BeginServiceTest(System.AsyncCallback callback, object asyncState);
        
        string EndServiceTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="FizzBuzz.CalcService/Divisiblity/Divisibility", ReplyAction="FizzBuzz.CalcService/Divisiblity/DivisibilityResponse")]
        string Divisibility(int dividends, int firstDivisor, int secondDivisor);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="FizzBuzz.CalcService/Divisiblity/Divisibility", ReplyAction="FizzBuzz.CalcService/Divisiblity/DivisibilityResponse")]
        System.IAsyncResult BeginDivisibility(int dividends, int firstDivisor, int secondDivisor, System.AsyncCallback callback, object asyncState);
        
        string EndDivisibility(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DivisiblityChannel : FizzBuzz.Service.Divisibility.Divisiblity, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DivisibilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DivisibilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DivisiblityClient : System.ServiceModel.ClientBase<FizzBuzz.Service.Divisibility.Divisiblity>, FizzBuzz.Service.Divisibility.Divisiblity {
        
        private BeginOperationDelegate onBeginServiceTestDelegate;
        
        private EndOperationDelegate onEndServiceTestDelegate;
        
        private System.Threading.SendOrPostCallback onServiceTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDivisibilityDelegate;
        
        private EndOperationDelegate onEndDivisibilityDelegate;
        
        private System.Threading.SendOrPostCallback onDivisibilityCompletedDelegate;
        
        public DivisiblityClient() {
        }
        
        public DivisiblityClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DivisiblityClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DivisiblityClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DivisiblityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ServiceTestCompletedEventArgs> ServiceTestCompleted;
        
        public event System.EventHandler<DivisibilityCompletedEventArgs> DivisibilityCompleted;
        
        public string ServiceTest() {
            return base.Channel.ServiceTest();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginServiceTest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceTest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndServiceTest(System.IAsyncResult result) {
            return base.Channel.EndServiceTest(result);
        }
        
        private System.IAsyncResult OnBeginServiceTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginServiceTest(callback, asyncState);
        }
        
        private object[] OnEndServiceTest(System.IAsyncResult result) {
            string retVal = this.EndServiceTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceTestCompleted(object state) {
            if ((this.ServiceTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceTestCompleted(this, new ServiceTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceTestAsync() {
            this.ServiceTestAsync(null);
        }
        
        public void ServiceTestAsync(object userState) {
            if ((this.onBeginServiceTestDelegate == null)) {
                this.onBeginServiceTestDelegate = new BeginOperationDelegate(this.OnBeginServiceTest);
            }
            if ((this.onEndServiceTestDelegate == null)) {
                this.onEndServiceTestDelegate = new EndOperationDelegate(this.OnEndServiceTest);
            }
            if ((this.onServiceTestCompletedDelegate == null)) {
                this.onServiceTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceTestCompleted);
            }
            base.InvokeAsync(this.onBeginServiceTestDelegate, null, this.onEndServiceTestDelegate, this.onServiceTestCompletedDelegate, userState);
        }
        
        public string Divisibility(int dividends, int firstDivisor, int secondDivisor) {
            return base.Channel.Divisibility(dividends, firstDivisor, secondDivisor);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDivisibility(int dividends, int firstDivisor, int secondDivisor, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDivisibility(dividends, firstDivisor, secondDivisor, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndDivisibility(System.IAsyncResult result) {
            return base.Channel.EndDivisibility(result);
        }
        
        private System.IAsyncResult OnBeginDivisibility(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dividends = ((int)(inValues[0]));
            int firstDivisor = ((int)(inValues[1]));
            int secondDivisor = ((int)(inValues[2]));
            return this.BeginDivisibility(dividends, firstDivisor, secondDivisor, callback, asyncState);
        }
        
        private object[] OnEndDivisibility(System.IAsyncResult result) {
            string retVal = this.EndDivisibility(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDivisibilityCompleted(object state) {
            if ((this.DivisibilityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DivisibilityCompleted(this, new DivisibilityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DivisibilityAsync(int dividends, int firstDivisor, int secondDivisor) {
            this.DivisibilityAsync(dividends, firstDivisor, secondDivisor, null);
        }
        
        public void DivisibilityAsync(int dividends, int firstDivisor, int secondDivisor, object userState) {
            if ((this.onBeginDivisibilityDelegate == null)) {
                this.onBeginDivisibilityDelegate = new BeginOperationDelegate(this.OnBeginDivisibility);
            }
            if ((this.onEndDivisibilityDelegate == null)) {
                this.onEndDivisibilityDelegate = new EndOperationDelegate(this.OnEndDivisibility);
            }
            if ((this.onDivisibilityCompletedDelegate == null)) {
                this.onDivisibilityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDivisibilityCompleted);
            }
            base.InvokeAsync(this.onBeginDivisibilityDelegate, new object[] {
                        dividends,
                        firstDivisor,
                        secondDivisor}, this.onEndDivisibilityDelegate, this.onDivisibilityCompletedDelegate, userState);
        }
    }
}
